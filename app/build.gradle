import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.internal.jvm.Jvm

evaluationDependsOn(':lib')

apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.neenbedankt.android-apt'

repositories {
    maven {
        url 'http://dl.bintray.com/alexanderr/maven'
    }
}

android {
    compileSdkVersion 'android-24'
    buildToolsVersion '25.0.0'

    defaultConfig {
        applicationId "net.sf.fakenames.aidl2.demo"
        minSdkVersion 18
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

apt {
    arguments {
        aidl2_log_to_file true
        aidl2_verbose true

    }
}

tasks.withType(Test) {
    it.testLogging {
        showExceptions true
        showStandardStreams true
        showStackTraces true
        showCauses true

        exceptionFormat TestExceptionFormat.FULL

        debug {
            events "started", "passed", "skipped", "failed", "standardOut", "standardError"
            exceptionFormat TestExceptionFormat.FULL
        }

        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat
    }
}

android.applicationVariants.all { variant ->
    def buildTypeName = variant.buildType.name.capitalize()
    def productFlavorNames = variant.productFlavors.collect { it.name.capitalize() } ?: ['']
    def productFlavorName = productFlavorNames.join('')
    def variationName = "${productFlavorName}${buildTypeName}"

    tasks.withType(Test) { task ->
        if (task.name.contains(variationName)) {
            def variationPath = variant.buildType.name;

            if (productFlavorName) {
                variationPath = "${productFlavorName.uncapitalize()}/$variationPath"
            }

            def copyTestResourcesTask = project.tasks.create("copyTest${variationName}Resources", Copy) {
                it.from("${projectDir}/src/test/resources")
                it.into("${buildDir}/intermediates/classes/test/${variationPath}")
            }

            task.dependsOn(copyTestResourcesTask)
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'

    if (project.properties.uploadInitiated || !project.hasProperty('theTimeHasCometh')) {
        compile project(':lib')
    } else {
        compile ('net.sf.aidl2:compiler:0.+') { changing = true }
    }

    androidTestCompile 'junit:junit:4.12'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'
    androidTestCompile 'com.google.truth:truth:0.28'

    testCompile 'junit:junit:4.12'
    testCompile 'com.google.testing.compile:compile-testing:0.9'
    testCompile 'com.google.truth:truth:0.28'
    testCompile files(Jvm.current().getRuntimeJar())
    testCompile files(Jvm.current().getToolsJar())
}
