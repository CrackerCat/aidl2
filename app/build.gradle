import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.internal.jvm.Jvm

evaluationDependsOn(':lib')

apply plugin: 'com.android.application'

repositories {
    maven {
        url 'http://dl.bintray.com/alexanderr/maven'
    }
}

android {
    compileSdkVersion 'android-24'
    buildToolsVersion '29.0.2'

    defaultConfig {
        applicationId 'net.sf.fakenames.aidl2.demo'
        minSdkVersion 18
        targetSdkVersion 23
        versionCode 1
        versionName '1.0'
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true

                arguments = [
                    aidl2_log_to_file: 'true',
                    aidl2_verbose: 'true',
                ]
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << '-Xlint:rawtypes'
    }
}

tasks.withType(Test) {
    it.testLogging {
        showExceptions true
        showStandardStreams true
        showStackTraces true
        showCauses true

        exceptionFormat TestExceptionFormat.FULL

        debug {
            events 'started', 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            exceptionFormat TestExceptionFormat.FULL
        }

        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat
    }
}

android.applicationVariants.all { variant ->
    def buildTypeName = variant.buildType.name.capitalize()
    def productFlavorNames = variant.productFlavors.collect { it.name.capitalize() } ?: ['']
    def productFlavorName = productFlavorNames.join('')
    def variationName = "${productFlavorName}${buildTypeName}"

    tasks.withType(Test) { task ->
        if (task.name.contains(variationName)) {
            def variationPath = variant.buildType.name;

            if (productFlavorName) {
                variationPath = "${productFlavorName.uncapitalize()}/$variationPath"
            }

            def copyTestResourcesTask = project.tasks.create("copyTest${variationName}Resources", Copy) {
                it.from("${projectDir}/src/test/resources")
                it.into("${buildDir}/intermediates/classes/test/${variationPath}")
            }

            task.dependsOn(copyTestResourcesTask)
        }
    }
}

dependencies {
    testImplementation 'junit:junit:4.12'

    androidTestImplementation 'junit:junit:4.12'

    implementation 'org.jetbrains:annotations:13.0'

    if (project.properties.uploadInitiated || !project.hasProperty('theTimeHasCometh')) {
        implementation project(':lib')
    } else {
        implementation ('net.sf.aidl2:compiler:0.+') { changing = true }
    }

    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    androidTestImplementation 'com.google.truth:truth:0.28'

    testImplementation 'com.google.testing.compile:compile-testing:0.9'
    testImplementation 'com.google.truth:truth:0.28'
    testImplementation 'org.robolectric:robolectric:3.8'

    testImplementation files("${System.properties.'java.home'}/lib/rt.jar")
    testImplementation files(Jvm.current().getToolsJar())
}