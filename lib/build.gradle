import org.gradle.internal.jvm.Jvm

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'propdeps'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'com.github.kt3k.coveralls'

sourceCompatibility = 1.8
targetCompatibility = 1.8

task copyTestResources(type: Copy) {
    from sourceSets.test.resources
    into sourceSets.test.output.classesDir
}

import com.github.jengelman.gradle.plugins.shadow.transformers.*
import proguard.gradle.*

shadowJar {
    transform(DontIncludeResourceTransformer) { it.resource = 'META-INF/maven/com.squareup/javapoet/pom.xml' }
    transform(DontIncludeResourceTransformer) { it.resource = 'META-INF/maven/com.squareup/javapoet/pom.properties' }

    dependencies {
        include(dependency('com.squareup:javapoet:1.5.1'))
    }
}

tasks.javadoc.configure {
    exclude '**/internal/**'

    options.noTimestamp
    options.windowTitle 'AIDL2 API documentation'
    options.linksOffline('http://d.android.com/reference/', "$System.env.ANDROID_HOME/docs/reference")
    options.header '' +
            '<script>' +
            'for(var i in document.links) {' +
            ' var l = document.links[i]; if (l.href.indexOf("http") === 0) l.target = "_blank";' +
            '}' +
            '</script>'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from project.sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    dependsOn tasks.javadoc

    classifier = 'javadoc'
    from project.javadoc.destinationDir
}

task applyProguard(type: ProGuardTask) {
    dependsOn shadowJar

    injars shadowJar.outputs

    outjars file("$buildDir/libs/optimized.jar")

    libraryjars "${System.properties.'java.home'}/lib/rt.jar"
    libraryjars configurations.compileOnly

    configuration file('proguard-config.pro')

    printmapping file("$buildDir/mapping.txt")
}

task proguardMapping(type: Zip) {
    dependsOn tasks.applyProguard

    classifier = 'proguard-mapping'

    from file("$buildDir/mapping.txt")
    into file("$buildDir/proguard-mapping.zip")
}

processResources.dependsOn copyTestResources

retrolambda {
    exclude 'Test', 'TestReport', 'test', 'testCompile'
    javaVersion JavaVersion.VERSION_1_6
    jdk System.getenv("JAVA_HOME")
    oldJdk System.getenv("JAVA7_HOME")
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

if (project.hasProperty('deploymentConfig')) {
    apply from: file("$rootProject.projectDir/deployment.gradle")
}

dependencies {
    compile 'com.squareup:javapoet:1.5.1'
    compile 'org.jetbrains:annotations:13.0'

    compileOnly 'com.google.android:android:4.1.1.4'
    compileOnly 'com.google.auto.service:auto-service:1.0-rc2'

    testCompile 'junit:junit:4.12'
    testCompile 'com.google.testing.compile:compile-testing:0.9'
    testCompile 'com.google.truth:truth:0.28'
    testCompile 'org.robolectric:android-all:6.0.0_r1-robolectric-0'
    testCompile files(Jvm.current().getToolsJar())
}