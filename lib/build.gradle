import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLoggingContainer
import org.gradle.internal.jvm.Jvm

import static org.gradle.api.tasks.testing.logging.TestLogEvent.*

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'com.github.kt3k.coveralls'

sourceCompatibility = 1.8
targetCompatibility = 1.8

task copyTestResources(type: Copy) {
    from sourceSets.test.resources
    into sourceSets.test.output.classesDirs[0]
}

import com.github.jengelman.gradle.plugins.shadow.transformers.*
import proguard.gradle.*

shadowJar {
    exclude 'net/sf/aidl2/*.class'

    transform(DontIncludeResourceTransformer) { it.resource = 'META-INF/maven/com.squareup/javapoet/pom.xml' }
    transform(DontIncludeResourceTransformer) { it.resource = 'META-INF/maven/com.squareup/javapoet/pom.properties' }

    dependencies {
        include(dependency('com.squareup:javapoet:1.5.1'))
    }
}

tasks.javadoc.configure {
    exclude '**/internal/**'
    exclude '**/Linker*'
    exclude '**/AidlUtil*'

    classpath += configurations.compileOnly
    classpath += project.files("$System.env.ANDROID_HOME/platforms/android-21/android.jar")

    options.noTimestamp
    options.encoding = 'UTF-8'
    options.noQualifiers 'all'
    options.windowTitle 'AIDL2 API documentation'

    options.addBooleanOption("-allow-script-in-comments", true)


    options.links += [
            'https://docs.oracle.com/javase/8/docs/api/',
    ]

    options.linksOffline('https://d.android.com/reference/', "$System.env.ANDROID_HOME/docs/reference")

    options.header """
<script>
var checkDomain = function(url) {
  if ( url.indexOf('//') === 0 ) { url = location.protocol + url; }
  return url.toLowerCase().replace(/([a-z])?:\\/\\//,'\$1').split('/')[0];
};
var isExternal = function(url) {
  return ( ( url.indexOf(':') > -1 || url.indexOf('//') > -1 ) && checkDomain(location.href) !== checkDomain(url) );
};
for(var i in document.links) {
  var l = document.links[i]; if (l.href != null && isExternal(l.href)) l.target = "_blank";
}
</script>
"""
}

if (project.properties.uploadInitiate || !project.hasProperty('theTimeHasCometh')) {
    compileJava {
        options.compilerArgs << '-g:lines,source'
    }
}

task apiJar(type: Jar) {
    dependsOn tasks.compileJava

    include 'net/sf/aidl2/*.class'

    baseName = 'api'

    includeEmptyDirs = false

    from project.sourceSets.main.output.classesDirs[0]
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from project.sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    dependsOn tasks.javadoc

    classifier = 'javadoc'
    from project.javadoc.destinationDir
}

task applyProguard(type: ProGuardTask) {
    dependsOn shadowJar

    injars shadowJar.outputs

    outjars file("$buildDir/libs/optimized.jar")

    libraryjars "${System.properties.'java.home'}/lib/rt.jar"
    libraryjars configurations.compileOnly
    libraryjars apiJar.outputs

    configuration file('proguard-config.pro')

    printmapping file("$buildDir/mapping.txt")
}

task proguardMapping(type: Zip) {
    dependsOn tasks.applyProguard

    classifier = 'proguard-mapping'

    from file("$buildDir/mapping.txt")
    into file("$buildDir/proguard-mapping.zip")
}

processResources.dependsOn copyTestResources

retrolambda {
    exclude 'Test', 'TestReport', 'test', 'testCompile'
    javaVersion JavaVersion.VERSION_1_6
    jdk System.getenv('JAVA_HOME')
}

test.testLogging { TestLoggingContainer it ->
    showExceptions = true
    showStandardStreams = true
    showStackTraces = true
    showCauses = true

    exceptionFormat = TestExceptionFormat.FULL

    it.debug {
        it.events STARTED, PASSED, SKIPPED, FAILED, STANDARD_OUT, STANDARD_ERROR
        exceptionFormat = TestExceptionFormat.FULL
    }

    it.info.events = it.debug.events
    it.info.exceptionFormat = it.debug.exceptionFormat
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

if (project.hasProperty('deploymentConfig')) {
    apply from: file("$rootProject.projectDir/deployment.gradle")
}

dependencies {
    compile 'com.squareup:javapoet:1.5.1'

    compileOnly 'org.jetbrains:annotations:13.0'
    compileOnly 'org.robolectric:android-all:5.0.2_r3-robolectric-r0'
    compileOnly 'com.google.auto.service:auto-service:1.0-rc3'

    annotationProcessor 'com.google.auto.service:auto-service:1.0-rc3'

    testImplementation 'org.jetbrains:annotations:13.0'
    testImplementation 'junit:junit:4.12'
    testImplementation 'com.google.testing.compile:compile-testing:0.9'
    testImplementation 'com.google.truth:truth:0.28'
    testImplementation 'org.robolectric:android-all:5.0.2_r3-robolectric-r0'

    testImplementation files(Jvm.current().getToolsJar())
}